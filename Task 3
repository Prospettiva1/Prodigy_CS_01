import re

def assess_password_strength(password):
    # Define criteria
    min_length = 8
    has_uppercase = re.search(r'[A-Z]', password)
    has_lowercase = re.search(r'[a-z]', password)
    has_digit = re.search(r'\d', password)
    has_special_char = re.search(r'[!@#$%^&*(),.?":{}|<>]', password)
    
    # Evaluate password strength
    length_score = len(password) >= min_length
    uppercase_score = has_uppercase is not None
    lowercase_score = has_lowercase is not None
    digit_score = has_digit is not None
    special_char_score = has_special_char is not None
    
    if length_score and uppercase_score and lowercase_score and digit_score and special_char_score:
        strength = "Very Strong"
    elif length_score and (uppercase_score or lowercase_score) and (digit_score or special_char_score):
        strength = "Strong"
    elif length_score and (uppercase_score or lowercase_score or digit_score or special_char_score):
        strength = "Moderate"
    elif length_score:
        strength = "Weak"
    else:
        strength = "Very Weak"
    
    # Feedback
    feedback = []
    if not length_score:
        feedback.append("Password should be at least 8 characters long.")
    if not uppercase_score:
        feedback.append("Password should include at least one uppercase letter.")
    if not lowercase_score:
        feedback.append("Password should include at least one lowercase letter.")
    if not digit_score:
        feedback.append("Password should include at least one digit.")
    if not special_char_score:
        feedback.append("Password should include at least one special character.")
    
    return strength, feedback

# Example usage
password = input("Enter your password to assess its strength: ")
strength, feedback = assess_password_strength(password)

print(f"Password Strength: {strength}")
if feedback:
    print("Feedback:")
    for item in feedback:
        print(f"- {item}")
